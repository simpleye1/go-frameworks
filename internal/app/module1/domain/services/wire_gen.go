// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package services

import (
	"context"
	"github.com/google/wire"
	"gorm.io/gorm"
	"test/internal/app/module1/infrastructure"
	"test/internal/app/module1/infrastructure/repos"
	"test/internal/pkg"
	"test/internal/pkg/app"
	"test/internal/pkg/config"
	"test/internal/pkg/log"
	"test/internal/pkg/migrate"
	"test/internal/pkg/tests"
)

// Injectors from wire.go:

func CreateTestContext(cf string) (*TestContext, error) {
	viper, err := config.New(cf)
	if err != nil {
		return nil, err
	}
	options, err := log.NewOptions(viper)
	if err != nil {
		return nil, err
	}
	logger, err := log.New(options)
	if err != nil {
		return nil, err
	}
	context := app.NewAppContext(viper, logger)
	migrationOptions, err := migrate.NewOptions(viper)
	if err != nil {
		return nil, err
	}
	contextContext := tests.NewTSContext(context)
	db, err := tests.NewDb(context, contextContext, logger)
	if err != nil {
		return nil, err
	}
	gormDB, err := migrate.Migrate(context, viper, migrationOptions, db, logger)
	if err != nil {
		return nil, err
	}
	detailRepository := repos.NewPostgresDetailsRepository(context, logger, gormDB)
	userRepository := repos.NewPostgresUserRepository(context, logger, gormDB)
	userDetailService := NewUserDetailServiceImpl(context, logger, detailRepository, userRepository)
	testContext := NewTestContext(userDetailService, gormDB)
	return testContext, nil
}

// wire.go:

var testProviderSet = wire.NewSet(
	ProviderSet, infrastructure.ProviderSet, pkg.TestProviderSet, NewTestContext,
)

type TestContext struct {
	userDetailService     UserDetailService
	db                    *gorm.DB
	testContainersContext context.Context
}

func NewTestContext(userDetailService UserDetailService, db *gorm.DB) *TestContext {
	return &TestContext{
		userDetailService:     userDetailService,
		db:                    db,
		testContainersContext: context.Background(),
	}
}
