// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package main

import (
	"github.com/google/wire"
	app2 "test/internal/app"
	context2 "test/internal/app/context"
	"test/internal/app/module1/application"
	"test/internal/app/module1/domain/services"
	"test/internal/app/module1/infrastructure/repos"
	"test/internal/app/module1/interfaces"
	"test/internal/app/module1/interfaces/apis"
	"test/internal/pkg"
	"test/internal/pkg/app"
	"test/internal/pkg/cachestore"
	"test/internal/pkg/config"
	"test/internal/pkg/context"
	"test/internal/pkg/database"
	"test/internal/pkg/log"
	"test/internal/pkg/migrate"
	"test/internal/pkg/redis"
	"test/internal/pkg/telemetry"
	"test/internal/pkg/transports/http"
	"test/internal/pkg/transports/http/middlewares"
)

import (
	_ "github.com/lib/pq"
)

// Injectors from wire.go:

func CreateApp(cf string) (*app.Application, func(), error) {
	viper, err := config.New(cf)
	if err != nil {
		return nil, nil, err
	}
	options, err := log.NewOptions(viper)
	if err != nil {
		return nil, nil, err
	}
	logger, err := log.New(options)
	if err != nil {
		return nil, nil, err
	}
	appOptions, err := app2.NewOptions(viper, logger)
	if err != nil {
		return nil, nil, err
	}
	httpOptions, err := http.NewOptions(viper)
	if err != nil {
		return nil, nil, err
	}
	engine := http.NewGin(httpOptions, logger)
	databaseOptions, err := database.NewOptions(viper, logger)
	if err != nil {
		return nil, nil, err
	}
	migrationOptions, err := migrate.NewOptions(viper)
	if err != nil {
		return nil, nil, err
	}
	db, err := database.New(databaseOptions)
	if err != nil {
		return nil, nil, err
	}
	gormDB, err := migrate.Migrate(viper, databaseOptions, migrationOptions, db, logger)
	if err != nil {
		return nil, nil, err
	}
	contextContext := context.NewContext()
	redisOptions, err := redis.NewOptions(viper, logger)
	if err != nil {
		return nil, nil, err
	}
	client, err := redis.NewRedis(contextContext, redisOptions)
	if err != nil {
		return nil, nil, err
	}
	redisStore := cachestore.NewRedisCache(client)
	appContext := &context.AppContext{
		Config:     viper,
		Log:        logger,
		Route:      engine,
		GormDB:     gormDB,
		DB:         db,
		CacheStore: redisStore,
		Context:    contextContext,
	}
	postgresDetailRepository := repos.NewPostgresDetailsRepository(logger, gormDB)
	postgresUserRepository := repos.NewPostgresUserRepository(logger, gormDB)
	userDetailServiceImpl := services.NewUserDetailServiceImpl(logger, postgresDetailRepository, postgresUserRepository)
	userDetailApplication := application.NewDetailsApplication(logger, userDetailServiceImpl)
	context3 := &context2.Context{
		AppContext:            appContext,
		UserDetailApplication: userDetailApplication,
		UserRepository:        postgresUserRepository,
		DetailRepository:      postgresDetailRepository,
		UserDetailService:     userDetailServiceImpl,
	}
	api := apis.NewAPI(logger, context3)
	userDetailAPI := apis.NewUserDetailAPI(api, userDetailApplication)
	v := interfaces.NewAPIS(userDetailAPI)
	telemetryOptions, err := telemetry.NewOptions(viper, logger)
	if err != nil {
		return nil, nil, err
	}
	middleware, cleanup := telemetry.NewTracerMiddleware(contextContext, telemetryOptions, logger)
	v2, cleanup2 := middlewares.NewMiddlewares(middleware)
	server, cleanup3, err := http.NewServer(httpOptions, logger, appContext, v, v2)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	appApplication, cleanup4, err := app2.NewApp(appOptions, appContext, logger, server)
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	return appApplication, func() {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}

// wire.go:

var providerSet = wire.NewSet(pkg.ProviderSet, app2.ProviderSet)
