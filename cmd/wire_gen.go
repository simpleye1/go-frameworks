// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package main

import (
	"github.com/google/wire"
	app2 "test/internal/app"
	context2 "test/internal/app/context"
	"test/internal/app/github/application"
	"test/internal/app/github/domain/services"
	"test/internal/app/github/infrastructure/clients"
	"test/internal/app/github/infrastructure/repos"
	"test/internal/app/github/interfaces/apis"
	"test/internal/pkg"
	"test/internal/pkg/app"
	"test/internal/pkg/cachestore"
	"test/internal/pkg/config"
	"test/internal/pkg/context"
	"test/internal/pkg/database"
	"test/internal/pkg/github"
	"test/internal/pkg/log"
	"test/internal/pkg/migrate"
	"test/internal/pkg/redis"
	"test/internal/pkg/telemetry"
	"test/internal/pkg/transports/http"
)

import (
	_ "github.com/lib/pq"
)

// Injectors from wire.go:

func CreateApp(cf string) (*app.Application, func(), error) {
	viper, err := config.New(cf)
	if err != nil {
		return nil, nil, err
	}
	options, err := log.NewOptions(viper)
	if err != nil {
		return nil, nil, err
	}
	logger, err := log.New(options)
	if err != nil {
		return nil, nil, err
	}
	appOptions, err := app2.NewOptions(viper, logger)
	if err != nil {
		return nil, nil, err
	}
	databaseOptions, err := database.NewOptions(viper, logger)
	if err != nil {
		return nil, nil, err
	}
	migrationOptions, err := migrate.NewOptions(viper)
	if err != nil {
		return nil, nil, err
	}
	db, err := database.NewSqlDb(databaseOptions)
	if err != nil {
		return nil, nil, err
	}
	init, err := migrate.NewInit(viper, databaseOptions, migrationOptions, db, logger)
	if err != nil {
		return nil, nil, err
	}
	contextContext := context.NewContext()
	telemetryOptions, err := telemetry.NewOptions(viper, logger)
	if err != nil {
		return nil, nil, err
	}
	httpOptions, err := http.NewOptions(viper)
	if err != nil {
		return nil, nil, err
	}
	engine := http.NewGin(httpOptions, logger)
	telemetryInit, cleanup := telemetry.NewInit(contextContext, telemetryOptions, logger, engine)
	gormDB, err := database.NewGormDb(db, logger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	redisOptions, err := redis.NewOptions(viper, logger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	client, err := redis.NewRedis(contextContext, redisOptions)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	redisStore := cachestore.NewRedisCache(client)
	githubOptions, err := github.NewOptions(viper, logger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	githubClient, err := github.NewGithub(viper, githubOptions, logger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	appInfraContext := &context.AppInfraContext{
		MigrateInit:   init,
		TelemetryInit: telemetryInit,
		Config:        viper,
		Log:           logger,
		Route:         engine,
		GormDB:        gormDB,
		DB:            db,
		CacheStore:    redisStore,
		Context:       contextContext,
		GithubClient:  githubClient,
	}
	api := apis.NewAPI(logger, appInfraContext)
	githubClientImpl := clients.NewGithubClientImpl(githubClient, contextContext)
	githubServiceImpl := services.NewUserDetailServiceImpl(logger, githubClientImpl)
	githubApplication := application.NewUserDetailsApplication(logger, githubServiceImpl)
	githubAPI := apis.NewGithubAPI(api, githubApplication)
	postgresUserRepository := repos.NewPostgresUserRepository(logger, gormDB)
	postgresDetailRepository := repos.NewPostgresDetailsRepository(logger, gormDB)
	appContext := &context2.AppContext{
		InfraContext:      appInfraContext,
		GithubAPI:         githubAPI,
		GithubApplication: githubApplication,
		UserRepository:    postgresUserRepository,
		DetailRepository:  postgresDetailRepository,
		GithubService:     githubServiceImpl,
	}
	server, cleanup2, err := http.NewServer(httpOptions, logger, engine)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	appApplication, cleanup3, err := app2.NewApp(appOptions, appContext, logger, server)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	return appApplication, func() {
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}

// wire.go:

var providerSet = wire.NewSet(pkg.ProviderSet, app2.ProviderSet)
