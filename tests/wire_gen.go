// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package tests

import (
	"github.com/google/wire"
	"test/internal/app"
	context2 "test/internal/app/context"
	"test/internal/app/github/application"
	services2 "test/internal/app/github/application/services"
	"test/internal/app/github/domain/services"
	"test/internal/app/github/infrastructure/clients"
	"test/internal/app/github/infrastructure/repos"
	"test/internal/app/github/interfaces/apis"
	"test/internal/pkg/cachestore"
	"test/internal/pkg/config"
	"test/internal/pkg/database"
	"test/internal/pkg/log"
	"test/internal/pkg/migrate"
	"test/tests/pkg"
	"test/tests/pkg/context"
	database2 "test/tests/pkg/database"
	"test/tests/pkg/github"
	"test/tests/pkg/redis"
	"test/tests/pkg/testcontainer"
	"test/tests/pkg/transports/http"
)

import (
	_ "github.com/lib/pq"
)

// Injectors from wire.go:

func CreateBackground(cf string) (*testcontainer.Background, func(), error) {
	viper, err := config.New(cf)
	if err != nil {
		return nil, nil, err
	}
	options, err := log.NewOptions(viper)
	if err != nil {
		return nil, nil, err
	}
	logger, err := log.New(options)
	if err != nil {
		return nil, nil, err
	}
	databaseOptions, err := database.NewOptions(viper, logger)
	if err != nil {
		return nil, nil, err
	}
	migrationOptions, err := migrate.NewOptions(viper)
	if err != nil {
		return nil, nil, err
	}
	contextContext := context.NewContext()
	db, err := database2.NewSQlDb(contextContext, databaseOptions, logger)
	if err != nil {
		return nil, nil, err
	}
	init, err := migrate.NewInit(viper, databaseOptions, migrationOptions, db, logger)
	if err != nil {
		return nil, nil, err
	}
	engine := http.NewTestGin(logger)
	gormDB, err := database.NewGormDb(db, logger)
	if err != nil {
		return nil, nil, err
	}
	client, err := redis.NewRedis(contextContext, logger)
	if err != nil {
		return nil, nil, err
	}
	redisStore := cachestore.NewRedisCache(client)
	githubClient, err := github.NewGithub()
	if err != nil {
		return nil, nil, err
	}
	testInfraContext := &context.TestInfraContext{
		MigrateInit:  init,
		Config:       viper,
		Log:          logger,
		Route:        engine,
		GormDB:       gormDB,
		DB:           db,
		CacheStore:   redisStore,
		Context:      contextContext,
		GithubClient: githubClient,
	}
	api := apis.NewAPI(logger, testInfraContext)
	githubClientImpl := clients.NewGithubClientImpl(githubClient, contextContext)
	githubServiceImpl := services.NewUserDetailServiceImpl(logger, githubClientImpl)
	githubApplication := application.NewUserDetailsApplication(logger, githubServiceImpl)
	githubAPI := apis.NewGithubAPI(api, githubApplication)
	postgresUserRepository := repos.NewPostgresUserRepository(logger, gormDB)
	postgresDetailRepository := repos.NewPostgresDetailsRepository(logger, gormDB)
	appContext := &context2.AppContext{
		InfraContext:      testInfraContext,
		GithubAPI:         githubAPI,
		GithubApplication: githubApplication,
		UserRepository:    postgresUserRepository,
		DetailRepository:  postgresDetailRepository,
		GithubService:     githubServiceImpl,
	}
	background := &testcontainer.Background{
		AppContext:            appContext,
		TestContainersContext: contextContext,
	}
	return background, func() {
	}, nil
}

func CreateGithubAPI(cf string, s services2.GithubService) (*apis.GithubAPI, error) {
	viper, err := config.New(cf)
	if err != nil {
		return nil, err
	}
	options, err := log.NewOptions(viper)
	if err != nil {
		return nil, err
	}
	logger, err := log.New(options)
	if err != nil {
		return nil, err
	}
	engine := http.NewTestGin(logger)
	memoryStore := cachestore.NewMemoryCache()
	testMockAPIInfraContext := &context.TestMockAPIInfraContext{
		Config:     viper,
		Log:        logger,
		Route:      engine,
		CacheStore: memoryStore,
	}
	api := apis.NewAPI(logger, testMockAPIInfraContext)
	githubApplication := application.NewUserDetailsApplication(logger, s)
	githubAPI := apis.NewGithubAPI(api, githubApplication)
	return githubAPI, nil
}

// wire.go:

var ProviderSet = wire.NewSet(app.ProviderSet, pkg.ProviderSet)
