// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package tests

import (
	"github.com/google/wire"
	"test/internal/app"
	context2 "test/internal/app/context"
	"test/internal/app/module1/domain/services"
	"test/internal/app/module1/infrastructure/repos"
	"test/internal/pkg/cachestore"
	"test/internal/pkg/config"
	pkg2 "test/internal/pkg/context"
	"test/internal/pkg/database"
	"test/internal/pkg/log"
	"test/internal/pkg/migrate"
	"test/internal/pkg/transports/http"
	"test/tests/pkg"
	database2 "test/tests/pkg/database"
	"test/tests/pkg/redis"
	"test/tests/pkg/testcontainer"
)

import (
	_ "github.com/lib/pq"
)

// Injectors from wire.go:

func CreateBackground(cf string) (*testcontainer.Background, error) {
	viper, err := config.New(cf)
	if err != nil {
		return nil, err
	}
	options, err := log.NewOptions(viper)
	if err != nil {
		return nil, err
	}
	logger, err := log.New(options)
	if err != nil {
		return nil, err
	}
	httpOptions, err := http.NewOptions(viper)
	if err != nil {
		return nil, err
	}
	engine := http.NewGin(httpOptions, logger)
	databaseOptions, err := database.NewOptions(viper, logger)
	if err != nil {
		return nil, err
	}
	migrationOptions, err := migrate.NewOptions(viper)
	if err != nil {
		return nil, err
	}
	contextContext := pkg2.NewContext()
	db, err := database2.NewDb(contextContext, databaseOptions, logger)
	if err != nil {
		return nil, err
	}
	gormDB, err := migrate.Migrate(viper, databaseOptions, migrationOptions, db, logger)
	if err != nil {
		return nil, err
	}
	client, err := redis.NewRedis(contextContext, logger)
	if err != nil {
		return nil, err
	}
	redisStore := cachestore.NewRedisCache(client)
	appContext := &pkg2.AppContext{
		Config:     viper,
		Log:        logger,
		Route:      engine,
		GormDB:     gormDB,
		DB:         db,
		CacheStore: redisStore,
		Context:    contextContext,
	}
	postgresUserRepository := repos.NewPostgresUserRepository(logger, gormDB)
	postgresDetailRepository := repos.NewPostgresDetailsRepository(logger, gormDB)
	userDetailServiceImpl := services.NewUserDetailServiceImpl(logger, postgresDetailRepository, postgresUserRepository)
	context3 := &context2.Context{
		AppContext:        appContext,
		UserRepository:    postgresUserRepository,
		DetailRepository:  postgresDetailRepository,
		UserDetailService: userDetailServiceImpl,
	}
	background := &testcontainer.Background{
		Context:               context3,
		TestContainersContext: contextContext,
	}
	return background, nil
}

// wire.go:

var ProviderSet = wire.NewSet(app.ProviderSet, pkg.ProviderSet)
